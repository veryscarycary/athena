services:
  mongodb:
    container_name: mongodb
    image: mongo:4.0
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - my_network

  postgres:
    container_name: postgres
    image: postgres:10
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initScripts:/docker-entrypoint-initdb.d # Mount your initialization scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:2.4.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 15s      # Time between checks
      timeout: 10s       # Time to wait for the healthcheck to complete
      retries: 5         # Number of retries before considering it unhealthy
      start_period: 20s  # Time to wait before starting healthchecks
    networks:
      - my_network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false

  user:
    container_name: user
    build:
      context: https://github.com/veryscarycary/athenaUser.git
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=user
      - DOCKER_COMPOSE=true

  ticket:
    container_name: ticket
    build:
      context: https://github.com/veryscarycary/athenaTicket.git  # Use the GitHub repo
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ticket
      - DOCKER_COMPOSE=true

  kb:
    container_name: kb
    build:
      context: https://github.com/veryscarycary/athenaKb.git
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=kb
      - DOCKER_COMPOSE=true

  kb-search:
    container_name: kb-search
    build:
      context: https://github.com/veryscarycary/athenaKbSearch.git
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - my_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DOCKER_COMPOSE=true

  athena-app:
    container_name: athena-app
    build:
      context: https://github.com/veryscarycary/athenaApp.git
    ports:
      - "3000:3000"
    depends_on:
      - user
      - ticket
      - kb
      - kb-search
    networks:
      - my_network
    environment:
      - DOCKER_COMPOSE=true

volumes:
  mongodb_data:
  postgres_data:
  es_data:
    driver: local

networks:
  my_network:
    driver: bridge
